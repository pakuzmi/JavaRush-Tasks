package com.javarush.task.task22.task2201;

/* 
Строки нитей или строковые нити? Вот в чем вопрос
*/

/*
1. Метод getPartOfString должен возвращать подстроку между первой и последней табуляцией.
2. На некорректные данные getPartOfString должен бросить исключение:
а) StringForFirstThreadTooShortException, если имя трэда FIRST_THREAD_NAME.
б) StringForSecondThreadTooShortException, если имя трэда SECOND_THREAD_NAME.
в) RuntimeException в других случаях.
3. Реализуйте логику трех protected методов в OurUncaughtExceptionHandler используя вызовы соответствующих методов согласно следующим шаблонам:
a) 1# : StringForFirstThreadTooShortException : java.lang.StringIndexOutOfBoundsException: String index out of range: -1
б) java.lang.StringIndexOutOfBoundsException: String index out of range: -1 : StringForSecondThreadTooShortException : 2#
в) RuntimeException : java.lang.StringIndexOutOfBoundsException: String index out of range: -1 : 3#
*/

public class Solution {
    public static void main(String[] args) {
        new Solution();
    }

    public static final String FIRST_THREAD_NAME = "1#";
    public static final String SECOND_THREAD_NAME = "2#";

    private Thread thread1;
    private Thread thread2;
    private Thread thread3;

    public Solution() {
        initThreads();
    }

    protected void initThreads() {
        this.thread1 = new Thread(new Task(this, "A\tB\tC\tD\tE\tF\tG\tH\tI"), FIRST_THREAD_NAME);
        this.thread2 = new Thread(new Task(this, "J\tK\tL\tM\tN\tO\tP\tQ\tR\tS\tT\tU\tV\tW\tX\tY\tZ"), SECOND_THREAD_NAME);
        this.thread3 = new Thread(new Task(this, "\t\t"), "3#");

        Thread.setDefaultUncaughtExceptionHandler(new OurUncaughtExceptionHandler());

        this.thread1.start();
        this.thread2.start();
        this.thread3.start();
    }

    public synchronized String getPartOfString(String string, String threadName) {
        Thread.UncaughtExceptionHandler handler = new OurUncaughtExceptionHandler();
        Thread.setDefaultUncaughtExceptionHandler(handler);
        String result = null;
        try {
            result = string.substring(string.indexOf('\t') + 1, string.lastIndexOf('\t'));
        } catch (StringIndexOutOfBoundsException e){
            if (threadName.equals(FIRST_THREAD_NAME)) {
                throw new StringForFirstThreadTooShortException();
            } else if (threadName.equals(SECOND_THREAD_NAME)){
                throw new StringForSecondThreadTooShortException();
            } else {
                throw new RuntimeException("java.lang.StringIndexOutOfBoundsException: String index out of range: -1");
            }
        }
        return result;
    }
}

public class OurUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {
    @Override
    public void uncaughtException(Thread t, Throwable e) {
        final String string = "%s : %s : %s";
        String s = t.getName();
        if (Solution.FIRST_THREAD_NAME.equals(s)) {
            System.out.println(getFormattedStringForFirstThread(t, e, string));
        } else if (Solution.SECOND_THREAD_NAME.equals(t.getName())) {
            System.out.println(getFormattedStringForSecondThread(t, e, string));
        } else {
            System.out.println(getFormattedStringForOtherThread(t, e, string));
        }
    }

    protected String getFormattedStringForOtherThread(Thread t, Throwable e, String string) {
        String result = String.format(string, e.getClass().getSimpleName(), e.getMessage(), t.getName());
        return result;
    }

    protected String getFormattedStringForSecondThread(Thread t, Throwable e, String string) {
        String result = String.format(string, e.getMessage(), e.getClass().getSimpleName(), t.getName());
        return result;
    }

    protected String getFormattedStringForFirstThread(Thread t, Throwable e, String string) {
        String result = String.format(string,t.getName(), e.getClass().getSimpleName(), e.getMessage());
        return result;
    }
}

public class StringForFirstThreadTooShortException extends RuntimeException {
    public StringForFirstThreadTooShortException(){
        super("java.lang.StringIndexOutOfBoundsException: String index out of range: -1");
    }
}

public class StringForSecondThreadTooShortException extends RuntimeException {
    public StringForSecondThreadTooShortException() {
        super("java.lang.StringIndexOutOfBoundsException: String index out of range: -1");
    }
}

public class Task implements Runnable {
    private String initialString;
    private Solution solution;

    public Task(Solution solution, String initialString) {
        this.solution = solution;
        this.initialString = initialString;
    }

    @Override
    public void run() {
        String name = Thread.currentThread().getName();
        String str = this.initialString;
        do {
            System.out.println(name + str);
        } while ((str = solution.getPartOfString(str, name)) != null || !str.isEmpty());
    }
}

